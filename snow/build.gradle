repositories {
  mavenCentral()
  flatDir {
    dirs "${rootDir}/lib"
  }
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
  }
}

group 'com.aisera'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.1.0'
def jarName = "aisera-snow-specific"
def containerName = "aisera/connector-snow:$System.env.branch"

assemble.doFirst {
  def libDir = new File("${rootDir}/install/opt/aisera/connectors/snow/lib")
  if (!libDir.exists()) {
    libDir.mkdirs()
  }

  def binDir = new File("${rootDir}/install/opt/aisera/connectors/snow/bin")
  if (!binDir.exists()) {
    binDir.mkdirs()
  }

  def confDir = new File("${rootDir}/install/opt/aisera/connectors/snow/conf")
  if (!confDir.exists()) {
    confDir.mkdirs()
  }

  copy {
    from "Dockerfile.snow"
    into "${rootDir}/build/install/opt/aisera/connectors/snow"
  }
}

assemble.doLast {
  copy {
    from "${buildDir}/libs/aisera-snow-all-0.1.0.jar"
    into "${rootDir}/build/install/opt/aisera/connectors/snow/lib/"
  }
  copy {
    from "bin/LaunchSnowConnector"
    into "${rootDir}/build/install/opt/aisera/connectors/snow/bin/"
  }
}

task buildImage(type: Exec) {
  workingDir "${rootDir}/build/install/opt/aisera/connectors"
  executable "docker"
  args "build", "-t", "${containerName}", "-f", "snow/Dockerfile.snow", "."
}

task cleanImage(type: Exec) {
  ignoreExitValue true
  executable "docker"
  args "rmi", "-f", "${containerName}"
}

dependencies {
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.24'
  compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
  compile group: 'oro', name: 'oro', version: '2.0.8'
  compile group: 'commons-validator', name: 'commons-validator', version: '1.3.1'

  compile 'org.jsoup:jsoup:1.11.1'
  compile 'com.github.rholder:guava-retrying:2.0.0'

  testCompile project(path: ':pipeline', configuration: 'testOutput')
}

jar {
  manifest {
    attributes('Implementation-Title': project.name,
      'Implementation-Version': project.version)
  }
}

assemble.dependsOn(shadowJar)

clean.finalizedBy cleanImage

shadowJar {
  zip64 true
  baseName = jarName
  classifier = null
  mergeServiceFiles()
  manifest {
    attributes('Implementation-Title': project.name,
      'Manifest-Version': '1.0',
      'Build-Jdk': '1.8.0_102')
  }
  from { [project.configurations.compile] } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    // exclude the base here
  }
  with jar
}

test {
  include '**/SnowTestSuiteMocked.class'
  include '**/SnowTestSuiteIntegrationReadFast.class'
  exclude '**/SnowTestSuiteIntegration.class'
  exclude '**/SnowTestSuiteMockedDocker.class'
}

task testJar (type: Jar, dependsOn: testClasses) {
  baseName = "test-${jarName}"
  from sourceSets.test.output
}

configurations {
  testArtifacts
}

artifacts {
  testArtifacts testJar
}
