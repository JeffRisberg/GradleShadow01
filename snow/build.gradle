repositories {
  mavenCentral()
  flatDir {
    dirs "${rootDir}/lib"
  }
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
  }
}

group 'com.company'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.1.0'
def jarName = "snow"
def containerName = "company/snow:$System.env.branch"

ext {
  slf4jVersion = '1.7.25'
  projectLombokVersion = '1.16.20'
  junitVersion = '4.12'
  mockitoVersion = '2.23.4'
}

assemble.doFirst {
  def libDir = new File("${rootDir}/install/opt/company/snow/lib")
  if (!libDir.exists()) {
    libDir.mkdirs()
  }

  def binDir = new File("${rootDir}/install/opt/company/snow/bin")
  if (!binDir.exists()) {
    binDir.mkdirs()
  }

  def confDir = new File("${rootDir}/install/opt/company/snow/conf")
  if (!confDir.exists()) {
    confDir.mkdirs()
  }

  copy {
    from "Dockerfile.snow"
    into "${rootDir}/build/install/opt/company/snow"
  }
}

assemble.doLast {
  copy {
    from "${buildDir}/libs/snow-0.1.0.jar"
    into "${rootDir}/build/install/opt/company/snow/lib/"
  }
  copy {
    from "bin/LaunchSnowConnector"
    into "${rootDir}/build/install/opt/company/snow/bin/"
  }
}

task buildImage(type: Exec) {
  workingDir "${rootDir}/build/install/opt/company"
  executable "docker"
  args "build", "-t", "${containerName}", "-f", "snow/Dockerfile.snow", "."
}

task cleanImage(type: Exec) {
  ignoreExitValue true
  executable "docker"
  args "rmi", "-f", "${containerName}"
}

dependencies {
  compile project(':base')

  compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
}

jar {
  manifest {
    attributes('Implementation-Title': project.name,
      'Implementation-Version': project.version)
  }
}

assemble.dependsOn(shadowJar)

clean.finalizedBy cleanImage

shadowJar {
  zip64 true
  baseName = jarName
  classifier = null
  mergeServiceFiles()
  manifest {
    attributes('Implementation-Title': project.name,
      'Manifest-Version': '1.0',
      'Build-Jdk': '1.8.0_102')
  }
  //from { [project.configurations.compile] } {
  //  exclude "META-INF/*.SF"
  //  exclude "META-INF/*.DSA"
  //  exclude "META-INF/*.RSA"
  //}
  dependencies {
    exclude(dependency("org.apache.commons:commons-lang3:3.8.1"))
    exclude(dependency("org.slf4j:slf4j-api:$slf4jVersion"))
    exclude(dependency("org.slf4j:slf4j-simple:$slf4jVersion"))
    exclude(dependency("org.projectlombok:lombok:$projectLombokVersion"))
    exclude(dependency("com.jayway.jsonpath:json-path:2.4.0"))

    //exclude(project(':base'))
  }
  with jar
}
