repositories {
  mavenCentral()
  flatDir {
    dirs "${rootDir}/lib"
  }
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
  }
}

group 'com.aisera'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.1.0'
def jarName = "base"
def containerName = "aisera/connector-pipeline:$System.env.branch"

assemble.doFirst {
  def libDir = new File("${rootDir}/build/install/opt/aisera/connectors/pipeline/lib")
  if (!libDir.exists()) {
    libDir.mkdirs()
  }

  def binDir = new File("${rootDir}/build/install/opt/aisera/connectors/pipeline/bin")
  if (!binDir.exists()) {
    binDir.mkdirs()
  }

  def confDir = new File("${rootDir}/build/install/opt/aisera/connectors/pipeline/conf")
  if (!confDir.exists()) {
    confDir.mkdirs()
  }

  copy {
    from "Dockerfile.pipeline"
    into "${rootDir}/build/install/opt/aisera/connectors/pipeline"
  }
}

assemble.doLast {
  copy {
    from "${buildDir}/libs/connector-pipeline-all-0.1.0.jar"
    into "${rootDir}/build/install/opt/aisera/connectors/pipeline/lib/"
  }
}

task buildImage(type: Exec) {
  workingDir "${rootDir}/build/install/opt/aisera/connectors"
  executable "docker"
  args "build", "-t", "${containerName}", "-f", "pipeline/Dockerfile.pipeline", "."
}

task cleanImage(type: Exec) {
  ignoreExitValue true
  executable "docker"
  args "rmi", "-f", "${containerName}"
}

dependencies {
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.24'

  // https://mvnrepository.com/artifact/commons-io/commons-io
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
  compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.9.0'
  compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

  // https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path
  compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'
}

jar {
  manifest {
    attributes('Implementation-Title': project.name,
      'Implementation-Version': project.version)
  }
}

assemble.dependsOn(shadowJar)

clean.finalizedBy cleanImage

configurations {
  testOutput
}

dependencies {
  testOutput sourceSets.test.output
}

shadowJar {
  zip64 true
  baseName = jarName
  classifier = null
  mergeServiceFiles()
  manifest {
    attributes('Implementation-Title': project.name,
      'Manifest-Version': '1.0',
      'Build-Jdk': '1.8.0_102')
  }
  from { [project.configurations.compile] } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  with jar
}
