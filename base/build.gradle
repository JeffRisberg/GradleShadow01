repositories {
  mavenCentral()
  flatDir {
    dirs "${rootDir}/lib"
  }
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
  }
}

group 'com.company'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.1.0'
def jarName = "base"
def containerName = "aisera/connector-pipeline:$System.env.branch"

ext {
  slf4jVersion = '1.7.25'
  projectLombokVersion = '1.16.20'
  junitVersion = '4.12'
  mockitoVersion = '2.23.4'
}

assemble.doFirst {
  def libDir = new File("${rootDir}/build/install/opt/company/connectors/base/lib")
  if (!libDir.exists()) {
    libDir.mkdirs()
  }

  def binDir = new File("${rootDir}/build/install/opt/company/connectors/base/bin")
  if (!binDir.exists()) {
    binDir.mkdirs()
  }

  def confDir = new File("${rootDir}/build/install/opt/company/connectors/base/conf")
  if (!confDir.exists()) {
    confDir.mkdirs()
  }

  copy {
    from "Dockerfile.base"
    into "${rootDir}/build/install/opt/company/connectors/base"
  }
}

assemble.doLast {
  copy {
    from "${buildDir}/libs/base-0.1.0.jar"
    into "${rootDir}/build/install/opt/company/connectors/base/lib/"
  }
}

task buildImage(type: Exec) {
  workingDir "${rootDir}/build/install/opt/company/connectors"
  executable "docker"
  args "build", "-t", "${containerName}", "-f", "base/Dockerfile.base", "."
}

task cleanImage(type: Exec) {
  ignoreExitValue true
  executable "docker"
  args "rmi", "-f", "${containerName}"
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.24'

  // https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path
  compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'
}

jar {
  manifest {
    attributes('Implementation-Title': project.name,
      'Implementation-Version': project.version)
  }
}

assemble.dependsOn(shadowJar)

clean.finalizedBy cleanImage

configurations {
  testOutput
}

dependencies {
  compile "org.apache.commons:commons-lang3:3.8.1"
  compile "org.slf4j:slf4j-api:$slf4jVersion"
  runtime "org.slf4j:slf4j-simple:$slf4jVersion"
  compile "org.projectlombok:lombok:$projectLombokVersion"

  testCompile "junit:junit:$junitVersion"
  testCompile "org.mockito:mockito-core:$mockitoVersion"
}

shadowJar {
  zip64 true
  baseName = jarName
  classifier = null
  mergeServiceFiles()
  manifest {
    attributes('Implementation-Title': project.name,
      'Manifest-Version': '1.0',
      'Build-Jdk': '1.8.0_102')
  }
  from { [project.configurations.compile] } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  with jar
}
